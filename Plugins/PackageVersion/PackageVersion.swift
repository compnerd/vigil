// Copyright Â© 2025 Saleem Abdulrasool <compnerd@compnerd.org>
// SPDX-License-Identifier: BSD-3-Clause

import PackagePlugin
import Foundation
import WinSDK

internal struct PluginError: Error {
  internal let message: String
  internal init(_ message: String) {
    self.message = message
  }
}

extension PluginError: CustomStringConvertible {
  public var description: String {
    message
  }
}

@main
internal struct PackageVersionPlugin: BuildToolPlugin {
  private func GitRevision() throws -> String {
    let git = try withUnsafeTemporaryAllocation(of: WCHAR.self, capacity: Int(MAX_PATH)) { pBuffer in
      _ = "git.exe".withCString(encodedAs: UTF16.self) {
        wcscpy_s(pBuffer.baseAddress, Int(pBuffer.count), $0)
      }
      guard PathFindOnPathW(pBuffer.baseAddress, nil) else {
        throw PluginError("`git.exe` not found")
      }
      return String(decodingCString: pBuffer.baseAddress!, as: UTF16.self)
    }

    let process = Process()
    process.executableURL = URL.init(filePath: git)
    process.arguments = ["describe", "--all", "--dirty"]

    let pipe = Pipe()
    process.standardOutput = pipe

    try process.run()
    process.waitUntilExit()

    let data = pipe.fileHandleForReading.readDataToEndOfFile()
    guard let revision =
        String(data: data, encoding: .utf8)?
               .trimmingCharacters(in: .whitespacesAndNewlines) else {
      throw PluginError("failed to read git revision")
    }
    return revision
  }

  func createBuildCommands(context: PluginContext, target: Target) throws -> [Command] {
    let output =
        context.pluginWorkDirectoryURL.appending(components: "GeneratedSources", "PackageVersion.swift",
                                                 directoryHint: .notDirectory)

    try FileManager.default.createDirectory(at: output.deletingLastPathComponent(),
                                            withIntermediateDirectories: true)

    try """
    // DO NOT EDIT! This file is generated by the PackageVersionPlugin.
    internal var PackageVersion: String { "\(try GitRevision())" }
    """.write(to: output, atomically: true, encoding: .utf8)

#if os(Windows)
    let executable = URL(filePath: ProcessInfo.processInfo.environment["ComSpec", default: ""])
#else
    let executable = URL(filePath: "/usr/bin/true")
#endif
    return [
      .buildCommand(displayName: "Generating PackageVersion.swift",
                    executable: executable,
                    arguments: ["/Q", "/C"],
                    outputFiles: [output]),
    ]
  }
}
